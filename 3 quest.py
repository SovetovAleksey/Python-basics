# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class Exception:
    def __init__(self, *args):
        self.my_list = []

    def verify(self):
        while True:
            try:
                value = int(input("Введите число "))
                self.my_list.append(value)
                print(f"Текущий список -  {self.my_list}")
            except:
                print("Введены неправильные значения ")
                choice = input("Продолжить? (Да/Нет) ")

                if choice == "Да":
                    print(example.verify())
                elif choice == "Нет":
                    print("Выход из порграммы ")
                    print(f"Итоговый список - {self.my_list}")
                    break
                else:
                    print("Выход из порграммы ")
                    print(f"Итоговый список - {self.my_list}")
                    break

example = Exception()
print(example.verify())
